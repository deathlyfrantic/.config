# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
# env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use 'alacritty' if it is
  # available, otherwise 'xterm-256color' is used.
  # TERM: screen-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 100
    lines: 30

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is not scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 2
    y: 2

  # Window decorations
  #
  # Available values:
  # - `full`: Window with title bar and title bar buttons
  # - `none`: Window without title bar, rounded corners, or drop shadow
  # - `transparent`: Window with title bar with transparent background and title
  #   bar buttons
  # - `buttonless`: Window with title bar with transparent background and no
  #   title bar buttons
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #     - buttonless: Title bar, transparent background and title bar buttons
  #     - transparent: Title bar, transparent background, but no title bar buttons
  decorations: full

  startup_mode: Maximized

  dynamic_title: true


scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # Normal (roman) font face
  normal:
    family: SF Mono
    # The `style` can be specified to pick a specific face.
    style: Regular

  # Italic font face
  bold:
    family: SF Mono
    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    family: SF Mono
    # The `style` can be specified to pick a specific face.
    style: Regular Italic

  bold_italic:
    family: SF Mono
    style: Bold Italic

  # Point size
  size: 16.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (OS X only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  use_thin_strokes: true

# Display the time it takes to redraw each frame.
# debug.render_timer: false

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Colors (Tomorrow Night Bright)
colors:
  # Default colors
  primary:
    background: '0x000000'
    foreground: '0xeaeaea'

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '0x9a9a9a'
    #bright_foreground: '0xffffff'

  # Cursor colors
  #
  # These will only be used when the `custom_cursor_colors` field is set to `true`.
  # cursor:
  #   text: '0x000000'
  #   cursor: '0xffffff'

  selection:
    text: '0xffffff'
    background: '0x6329cd'

  # Normal colors
  normal:
    black:   '0x2e3436'
    red:     '0xcc0000'
    green:   '0x4e9a06'
    yellow:  '0xc4a000'
    blue:    '0x3465a4'
    magenta: '0x75507b'
    cyan:    '0x0b939b'
    white:   '0xd3d7cf'

  # Bright colors
  bright:
    black:   '0x555753'
    red:     '0xef2929'
    green:   '0x8ae234'
    yellow:  '0xfce94f'
    blue:    '0x729fcf'
    magenta: '0xad7fa8'
    cyan:    '0x00f5e9'
    white:   '0xeeeeec'

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  # dim:
  #   black:   '0x333333'
  #   red:     '0xf2777a'
  #   green:   '0x99cc99'
  #   yellow:  '0xffcc66'
  #   blue:    '0x6699cc'
  #   magenta: '0xcc99cc'
  #   cyan:    '0x66cccc'
  #   white:   '0xdddddd'

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #indexed_colors:
  #  - { index: 16, color: '0x000000' }

  # Keyboard regex hints
  hints:
     # First character in the hint label

     # Allowed values are CellForeground/CellBackground, which reference the
     # affected cell, or hexadecimal colors like #ff00ff.
    start:
      foreground: '#1d1f21'
      background: '#e9ff5e'

     # All characters after the first one in the hint label

     # Allowed values are CellForeground/CellBackground, which reference the
     # affected cell, or hexadecimal colors like #ff00ff.
    end:
      foreground: '#e9ff5e'
      background: '#1d1f21'

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0

# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
# mouse_bindings:
#   - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  hide_when_typing: true
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Regex hints
#
# Terminal hints can be used to find text in the visible part of the terminal
# and pipe it to other applications.
hints:
  # Keys used for the hint labels.
  alphabet: "jfkdls;ahgurieowpq"

  # List with all available hints
  #
  # Each hint must have a `regex` and either an `action` or a `command` field.
  # The fields `mouse`, `binding` and `post_processing` are optional.
  #
  # The fields `command`, `binding.key`, `binding.mods` and `mouse.mods` accept
  # the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  enabled:
   - regex: "(magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
             [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
     command: open
     post_processing: true
     mouse:
       enabled: true
       mods: None
     binding:
       key: U
       mods: Control|Shift

# Cursor style
#
# Values for 'cursor_style':
#   - Block
#   - Underline
#   - Beam
cursor:
  style: Block
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
shell:
 program: /Users/zandr/.config/alacritty/run-zsh.sh
 args:
   - -c
   - tmux

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify
# a key and modifiers required to trigger it, terminal modes where the binding
# is applicable, and what should be done when the key binding fires. It can
# either send a byte sequnce to the running application (`chars`), execute
# a predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Example:
#   `- { key: V, mods: Command, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad

key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Paste,                   action: Paste                        }
  - { key: Copy,                    action: Copy                         }
  - { key: H,        mods: Command, action: None                         }
  - { key: Q,        mods: Command, action: None                         }
  - { key: W,        mods: Command, action: None                         }
  - { key: N,        mods: Command, action: SpawnNewInstance             }
  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
  - { key: PageUp,   mods: Shift,   action: ScrollPageUp                 }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown, mods: Shift,   action: ScrollPageDown               }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~"                     }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                   }
  - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                   }
  - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                   }
  - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                   }
  - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                  }
  - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                  }
  - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                  }
  - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                  }
  - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                  }
  - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                  }
  - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                  }
  - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                  }
  - { key: F1,       mods: Control, chars: "\x1b[1;5P"                   }
  - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                   }
  - { key: F3,       mods: Control, chars: "\x1b[1;5R"                   }
  - { key: F4,       mods: Control, chars: "\x1b[1;5S"                   }
  - { key: F5,       mods: Control, chars: "\x1b[15;5~"                  }
  - { key: F6,       mods: Control, chars: "\x1b[17;5~"                  }
  - { key: F7,       mods: Control, chars: "\x1b[18;5~"                  }
  - { key: F8,       mods: Control, chars: "\x1b[19;5~"                  }
  - { key: F9,       mods: Control, chars: "\x1b[20;5~"                  }
  - { key: F10,      mods: Control, chars: "\x1b[21;5~"                  }
  - { key: F11,      mods: Control, chars: "\x1b[23;5~"                  }
  - { key: F12,      mods: Control, chars: "\x1b[24;5~"                  }
  - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                   }
  - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                   }
  - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                   }
  - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                   }
  - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                  }
  - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                  }
  - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                  }
  - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                  }
  - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                  }
  - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                  }
  - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                  }
  - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                  }
  - { key: F1,       mods: Command, chars: "\x1b[1;3P"                   }
  - { key: F2,       mods: Command, chars: "\x1b[1;3Q"                   }
  - { key: F3,       mods: Command, chars: "\x1b[1;3R"                   }
  - { key: F4,       mods: Command, chars: "\x1b[1;3S"                   }
  - { key: F5,       mods: Command, chars: "\x1b[15;3~"                  }
  - { key: F6,       mods: Command, chars: "\x1b[17;3~"                  }
  - { key: F7,       mods: Command, chars: "\x1b[18;3~"                  }
  - { key: F8,       mods: Command, chars: "\x1b[19;3~"                  }
  - { key: F9,       mods: Command, chars: "\x1b[20;3~"                  }
  - { key: F10,      mods: Command, chars: "\x1b[21;3~"                  }
  - { key: F11,      mods: Command, chars: "\x1b[23;3~"                  }
  - { key: F12,      mods: Command, chars: "\x1b[24;3~"                  }
  - { key: NumpadEnter,             chars: "\n"                          }

  # make alt work on macos
  # (from https://github.com/jwilm/alacritty/issues/62#issuecomment-347552058)
  - { key: A,         mods: Alt,       chars: "\x1ba"  }
  - { key: B,         mods: Alt,       chars: "\x1bb"  }
  - { key: C,         mods: Alt,       chars: "\x1bc"  }
  - { key: D,         mods: Alt,       chars: "\x1bd"  }
  - { key: E,         mods: Alt,       chars: "\x1be"  }
  - { key: F,         mods: Alt,       chars: "\x1bf"  }
  - { key: G,         mods: Alt,       chars: "\x1bg"  }
  - { key: H,         mods: Alt,       chars: "\x1bh"  }
  - { key: I,         mods: Alt,       chars: "\x1bi"  }
  - { key: J,         mods: Alt,       chars: "\x1bj"  }
  - { key: K,         mods: Alt,       chars: "\x1bk"  }
  - { key: L,         mods: Alt,       chars: "\x1bl"  }
  - { key: M,         mods: Alt,       chars: "\x1bm"  }
  - { key: N,         mods: Alt,       chars: "\x1bn"  }
  - { key: O,         mods: Alt,       chars: "\x1bo"  }
  - { key: P,         mods: Alt,       chars: "\x1bp"  }
  - { key: Q,         mods: Alt,       chars: "\x1bq"  }
  - { key: R,         mods: Alt,       chars: "\x1br"  }
  - { key: S,         mods: Alt,       chars: "\x1bs"  }
  - { key: T,         mods: Alt,       chars: "\x1bt"  }
  - { key: U,         mods: Alt,       chars: "\x1bu"  }
  - { key: V,         mods: Alt,       chars: "\x1bv"  }
  - { key: W,         mods: Alt,       chars: "\x1bw"  }
  - { key: X,         mods: Alt,       chars: "\x1bx"  }
  - { key: Y,         mods: Alt,       chars: "\x1by"  }
  - { key: Z,         mods: Alt,       chars: "\x1bz"  }
  - { key: A,         mods: Alt|Shift, chars: "\x1bA"  }
  - { key: B,         mods: Alt|Shift, chars: "\x1bB"  }
  - { key: C,         mods: Alt|Shift, chars: "\x1bC"  }
  - { key: D,         mods: Alt|Shift, chars: "\x1bD"  }
  - { key: E,         mods: Alt|Shift, chars: "\x1bE"  }
  - { key: F,         mods: Alt|Shift, chars: "\x1bF"  }
  - { key: G,         mods: Alt|Shift, chars: "\x1bG"  }
  - { key: H,         mods: Alt|Shift, chars: "\x1bH"  }
  - { key: I,         mods: Alt|Shift, chars: "\x1bI"  }
  - { key: J,         mods: Alt|Shift, chars: "\x1bJ"  }
  - { key: K,         mods: Alt|Shift, chars: "\x1bK"  }
  - { key: L,         mods: Alt|Shift, chars: "\x1bL"  }
  - { key: M,         mods: Alt|Shift, chars: "\x1bM"  }
  - { key: N,         mods: Alt|Shift, chars: "\x1bN"  }
  - { key: O,         mods: Alt|Shift, chars: "\x1bO"  }
  - { key: P,         mods: Alt|Shift, chars: "\x1bP"  }
  - { key: Q,         mods: Alt|Shift, chars: "\x1bQ"  }
  - { key: R,         mods: Alt|Shift, chars: "\x1bR"  }
  - { key: S,         mods: Alt|Shift, chars: "\x1bS"  }
  - { key: T,         mods: Alt|Shift, chars: "\x1bT"  }
  - { key: U,         mods: Alt|Shift, chars: "\x1bU"  }
  - { key: V,         mods: Alt|Shift, chars: "\x1bV"  }
  - { key: W,         mods: Alt|Shift, chars: "\x1bW"  }
  - { key: X,         mods: Alt|Shift, chars: "\x1bX"  }
  - { key: Y,         mods: Alt|Shift, chars: "\x1bY"  }
  - { key: Z,         mods: Alt|Shift, chars: "\x1bZ"  }
  - { key: Key1,      mods: Alt,       chars: "\x1b1"  }
  - { key: Key2,      mods: Alt,       chars: "\x1b2"  }
  - { key: Key3,      mods: Alt,       chars: "\x1b3"  }
  - { key: Key4,      mods: Alt,       chars: "\x1b4"  }
  - { key: Key5,      mods: Alt,       chars: "\x1b5"  }
  - { key: Key6,      mods: Alt,       chars: "\x1b6"  }
  - { key: Key7,      mods: Alt,       chars: "\x1b7"  }
  - { key: Key8,      mods: Alt,       chars: "\x1b8"  }
  - { key: Key9,      mods: Alt,       chars: "\x1b9"  }
  - { key: Key0,      mods: Alt,       chars: "\x1b0"  }
  - { key: Space,     mods: Control,   chars: "\x00"   } # Ctrl + Space
  - { key: Grave,     mods: Alt,       chars: "\x1b`"  } # Alt + `
  - { key: Grave,     mods: Alt|Shift, chars: "\x1b~"  } # Alt + ~
  - { key: Period,    mods: Alt,       chars: "\x1b."  } # Alt + .
  - { key: Key8,      mods: Alt|Shift, chars: "\x1b*"  } # Alt + *
  - { key: Key3,      mods: Alt|Shift, chars: "\x1b#"  } # Alt + #
  - { key: Period,    mods: Alt|Shift, chars: "\x1b>"  } # Alt + >
  - { key: Comma,     mods: Alt|Shift, chars: "\x1b<"  } # Alt + <
  - { key: Minus,     mods: Alt|Shift, chars: "\x1b_"  } # Alt + _
  - { key: Key5,      mods: Alt|Shift, chars: "\x1b%"  } # Alt + %
  - { key: Key6,      mods: Alt|Shift, chars: "\x1b^"  } # Alt + ^
  - { key: Backslash, mods: Alt,       chars: "\x1b\\" } # Alt + \
  - { key: Backslash, mods: Alt|Shift, chars: "\x1b|"  } # Alt + |

  # make ctrl-$key work (https://github.com/jwilm/alacritty/issues/1359)
  - { key: Q,         mods: Control,   chars: "\x11"   } # Ctrl + Q
  - { key: Key6,      mods: Control,   chars: "\x1e"   } # Ctrl-6

  # tmux (https://arslan.io/2018/02/05/gpu-accelerated-terminal-alacritty/)
  # prefix
  - { key: B,        mods: Command,       chars: "\x1b[24~"       }
  # switch panes/tabs/whatever
  - { key: Key1,     mods: Command,       chars: "\x1b[24~1"      }
  - { key: Key2,     mods: Command,       chars: "\x1b[24~2"      }
  - { key: Key3,     mods: Command,       chars: "\x1b[24~3"      }
  - { key: Key4,     mods: Command,       chars: "\x1b[24~4"      }
  - { key: Key5,     mods: Command,       chars: "\x1b[24~5"      }
  - { key: Key6,     mods: Command,       chars: "\x1b[24~6"      }
  - { key: Key7,     mods: Command,       chars: "\x1b[24~7"      }
  - { key: Key8,     mods: Command,       chars: "\x1b[24~8"      }
  - { key: Key9,     mods: Command,       chars: "\x1b[24~9"      }
  - { key: Key0,     mods: Command,       chars: "\x1b[24~0"      }
  # create new pane/tab/whatever
  - { key: T,        mods: Command,       chars: "\x1b[24~c"      }
  # move between windows
  - { key: H,        mods: Command,       chars: "\x1b[24~h"      }
  - { key: J,        mods: Command,       chars: "\x1b[24~j"      }
  - { key: K,        mods: Command,       chars: "\x1b[24~k"      }
  - { key: L,        mods: Command,       chars: "\x1b[24~l"      }
  - { key: LBracket, mods: Shift|Command, chars: "\x1b[24~{"      }
  - { key: RBracket, mods: Shift|Command, chars: "\x1b[24~}"      }
  # move windows
  - { key: Left,     mods: Shift|Command, chars: "\x1b[24~\x1b[1;2D" }
  - { key: Right,    mods: Shift|Command, chars: "\x1b[24~\x1b[1;2C" }
  # resize windows
  - { key: Right,    mods: Command,       chars: "\x1b[24~\x1b[C" }
  - { key: Left,     mods: Command,       chars: "\x1b[24~\x1b[D" }
  - { key: Down,     mods: Command,       chars: "\x1b[24~\x1b[B" }
  - { key: Up,       mods: Command,       chars: "\x1b[24~\x1b[A" }
  # split windows (iterm-like bindings)
  - { key: D,        mods: Command,       chars: "\x1b[24~v"      }
  - { key: D,        mods: Shift|Command, chars: "\x1b[24~s"      }
  # copy mode
  - { key: LBracket, mods: Command,       chars: "\x1b[24~["      }
  # search
  - { key: F,        mods: Command,       chars: "\x1b[24~f"      }
  - { key: F,        mods: Shift|Command, chars: "\x1b[24~F"      }
  # thumbs
  - { key: Space,    mods: Shift|Command, chars: "\x1b[24~ "      }
